import { PongTournamentScoresABI, PongTournamentScoresBytecode } from './contractConfig';
import { keccak256 } from 'js-sha3';

export class BlockchainService {
    private contractAddress: string | null = null;
    private connectedAddress: string | null = null;
    private eventListeners: (() => void)[] = [];
    private scoreUpdateCallbacks: ((player: string, score: number) => void)[] = [];

    constructor() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
        this.contractAddress = localStorage.getItem('blockchainContractAddress');
        this.connectedAddress = localStorage.getItem('blockchainConnectedAddress');
    }

    // –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –ø–æ –µ–≥–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
    private getEventTopicHash(eventSignature: string): string {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è keccak256 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—Ä–æ–¥–µ ethers.js
        // ScoreUpdated(address,uint256) -> 0x9df7f885bea1d9475c5c33b4f9695e151452bf87c24871d67cbb25a6679f9294
        const knownHashes: { [key: string]: string } = {
            'ScoreUpdated(address,uint256)': '0x9df7f885bea1d9475c5c33b4f9695e151452bf87c24871d67cbb25a6679f9294',
            'OwnershipTransferred(address,address)': '0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0'
        };

        if (knownHashes[eventSignature]) {
            return knownHashes[eventSignature];
        }

        console.warn(`–•–µ—à –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventSignature} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ScoreUpdated –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
        return knownHashes['ScoreUpdated(address,uint256)'];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Core.app
    private isCoreAppAvailable(): boolean {
        return typeof window !== 'undefined' &&
            typeof window.avalanche !== 'undefined' &&
            window.avalanche !== null;
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É Core.app
    public async connectWallet(): Promise<string | null> {
        if (!this.isCoreAppAvailable() || !window.avalanche) {
            throw new Error('Core.app —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
        }

        try {
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
            const accounts = await window.avalanche.request({ method: 'eth_requestAccounts' });
            if (accounts && accounts.length > 0) {
                this.connectedAddress = accounts[0];
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
                localStorage.setItem('blockchainConnectedAddress', accounts[0]);
                return this.connectedAddress;
            }
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    public getConnectedAddress(): string | null {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (this.connectedAddress) {
            return this.connectedAddress;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const saved = localStorage.getItem('blockchainConnectedAddress');
        if (saved) {
            this.connectedAddress = saved;
            return saved;
        }
        return null;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    public setContractAddress(address: string): void {
        console.log(`üîß Setting contract address: ${this.contractAddress} -> ${address}`);
        this.contractAddress = address;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
        localStorage.setItem('blockchainContractAddress', address);
        console.log(`üíæ Contract address saved to localStorage: ${address}`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    public getContractAddress(): string | null {
        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        const saved = localStorage.getItem('blockchainContractAddress');
        if (saved && saved !== this.contractAddress) {
            console.log(`üîÑ Contract address updated from localStorage: ${this.contractAddress} -> ${saved}`);
            this.contractAddress = saved;
        }
        return this.contractAddress;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ localStorage
    public refreshContractAddress(): string | null {
        const saved = localStorage.getItem('blockchainContractAddress');
        if (saved) {
            this.contractAddress = saved;
            console.log(`‚ôªÔ∏è Refreshed contract address: ${saved}`);
        }
        return this.contractAddress;
    }

    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    public async deployContract(): Promise<string | null> {
        if (!this.connectedAddress) {
            throw new Error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
        }

        if (!this.isCoreAppAvailable() || !window.avalanche) {
            throw new Error('Core.app —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –±–∞–π—Ç–∫–æ–¥–∞
            if (!PongTournamentScoresBytecode || !PongTournamentScoresBytecode.startsWith('0x')) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–π—Ç–∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
            }

            console.log('–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
                from: this.connectedAddress,
                dataLength: PongTournamentScoresBytecode.length
            });

            // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Core.app
            const params = {
                from: this.connectedAddress,
                data: PongTournamentScoresBytecode,
                gas: '0x1E8480', // 2000000 –≤ hex (—É–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç –≥–∞–∑–∞)
                gasPrice: '0x9C4653600', // 42 gwei –≤ hex (—É–º–µ–Ω—å—à–∏–ª–∏ —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è Avalanche)
                value: '0x0' // –ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ñ–∏—Ä–∞
            };

            const txHash = await window.avalanche.request({
                method: 'eth_sendTransaction',
                params: [params]
            });

            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const receipt = await this.waitForTransaction(txHash);
            if (receipt && receipt.contractAddress) {
                this.setContractAddress(receipt.contractAddress); // –ò—Å–ø–æ–ª—å–∑—É–µ–º setContractAddress –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
                return this.contractAddress;
            }
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error);
            throw error;
        }
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    private async waitForTransaction(txHash: string): Promise<any> {
        if (!window.avalanche) {
            throw new Error('Core.app –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        return new Promise((resolve, reject) => {
            const checkReceipt = async () => {
                try {
                    if (!window.avalanche) {
                        reject(new Error('Core.app –ø–æ—Ç–µ—Ä—è–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'));
                        return;
                    }

                    const receipt = await window.avalanche.request({
                        method: 'eth_getTransactionReceipt',
                        params: [txHash]
                    });

                    if (receipt) {
                        resolve(receipt);
                    } else {
                        setTimeout(checkReceipt, 2000);
                    }
                } catch (error) {
                    reject(error);
                }
            };

            checkReceipt();
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    public async getPlayerScore(playerAddress: string): Promise<number> {
        if (!this.contractAddress) {
            throw new Error('–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        if (!window.avalanche) {
            throw new Error('Core.app –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        try {
            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            const data = this.encodeCall('getScore', ['address'], [playerAddress]);

            // –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const result = await window.avalanche.request({
                method: 'eth_call',
                params: [{
                    to: this.contractAddress,
                    data
                }, 'latest']
            });

            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return parseInt(result, 16);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
    public async getPlayerName(playerAddress: string): Promise<string> {
        if (!this.contractAddress) {
            throw new Error('–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        if (!window.avalanche) {
            throw new Error('Core.app –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        try {
            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            const data = this.encodeCall('getPlayerName', ['address'], [playerAddress]);

            // –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const result = await window.avalanche.request({
                method: 'eth_call',
                params: [{
                    to: this.contractAddress,
                    data
                }, 'latest']
            });

            console.log(`getPlayerName(${playerAddress}) raw result:`, result);

            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ hex
            if (!result || result === '0x' || result.length < 130) {
                console.log(`No valid name data for address ${playerAddress}`);
                return '';
            }

            try {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 64 —Å–∏–º–≤–æ–ª–∞ (32 –±–∞–π—Ç–∞ offset) –∏ —Å–ª–µ–¥—É—é—â–∏–µ 64 —Å–∏–º–≤–æ–ª–∞ (32 –±–∞–π—Ç–∞ length)
                if (result.length < 130) {
                    return '';
                }

                const lengthHex = result.slice(66, 130); // –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
                const length = parseInt(lengthHex, 16);

                if (length === 0) {
                    return '';
                }

                const hexString = result.slice(130, 130 + length * 2); // –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ —Å—Ç—Ä–æ–∫—É
                let name = '';
                for (let i = 0; i < hexString.length; i += 2) {
                    const hex = hexString.substr(i, 2);
                    const charCode = parseInt(hex, 16);
                    if (charCode > 0) {
                        name += String.fromCharCode(charCode);
                    }
                }

                return name.trim();
            } catch (decodeError) {
                console.warn('Error decoding player name:', decodeError);
                return '';
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error getting player name (using fallback):', error);
            return ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    public async getAllUniquePlayersWithStats(): Promise<Array<{
        name: string,
        address: string,
        totalScore: number,
        gamesPlayed: number,
        gamesWon: number,
        winRate: number
    }>> {
        if (!this.contractAddress) {
            console.warn('Contract address not set');
            return [];
        }

        if (!window.avalanche) {
            console.warn('Core.app not available');
            return [];
        }

        try {
            console.log(`üîç Getting unique players with stats from contract: ${this.contractAddress}`);
            console.log(`üìç Using contract address for READ: ${this.contractAddress}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            console.log(`üí° Checking if contract has player data...`);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            try {
                const countData = this.encodeCall('getUniquePlayersCount', [], []);
                const countResult = await window.avalanche.request({
                    method: 'eth_call',
                    params: [{
                        to: this.contractAddress,
                        data: countData
                    }, 'latest']
                });
                const uniquePlayerCount = parseInt(countResult, 16);
                console.log(`üéÆ Unique players count: ${uniquePlayerCount}`);
            } catch (countError) {
                console.warn('Could not get unique players count:', countError);
            }

            // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const data = this.encodeCall('getAllUniquePlayersWithStats', [], []);
            const result = await window.avalanche.request({
                method: 'eth_call',
                params: [{
                    to: this.contractAddress,
                    data: data
                }, 'latest']
            });

            console.log('Raw result from getAllUniquePlayersWithStats:', result);
            console.log('Result length:', result?.length);

            if (!result || result === '0x' || result.length < 130) {
                console.log('‚ö†Ô∏è No valid data returned from contract, trying legacy method');
                console.log('Result details:', { result, length: result?.length });
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                return await this.getAllPlayersLegacy();
            }

            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (5 –º–∞—Å—Å–∏–≤–æ–≤: names, addresses, scores, gamesPlayed, gamesWon)
            const players = this.decodeMultipleArraysResult(result, 5);

            console.log('Decoded players arrays:', players);
            console.log('Array lengths:', players.map(arr => arr.length));

            if (players.length === 0) {
                console.log('‚ö†Ô∏è No players found in contract');
                return [];
            }

            const [names, addresses, scores, gamesPlayed, gamesWon] = players;
            const playersData = [];

            for (let i = 0; i < names.length; i++) {
                const totalScore = scores[i] || 0;
                const played = gamesPlayed[i] || 0;
                const won = gamesWon[i] || 0;
                const winRate = played > 0 ? Math.round((won / played) * 100) : 0;

                playersData.push({
                    name: names[i] || `Player ${i + 1}`,
                    address: addresses[i] || '0x0000000000000000000000000000000000000000',
                    totalScore: totalScore,
                    gamesPlayed: played,
                    gamesWon: won,
                    winRate: winRate
                });
            }

            console.log(`‚úÖ Found ${playersData.length} unique players with stats`);
            return playersData;

        } catch (error) {
            console.warn('Error getting unique players with stats, falling back to legacy:', error);
            return await this.getAllPlayersLegacy();
        }
    }

    // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    private async getAllPlayersLegacy(): Promise<Array<{
        name: string,
        address: string,
        totalScore: number,
        gamesPlayed: number,
        gamesWon: number,
        winRate: number
    }>> {
        try {
            const legacyPlayers = await this.getAllPlayers();
            return legacyPlayers.map(player => ({
                name: player.name,
                address: player.address,
                totalScore: player.score,
                gamesPlayed: 1, // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                gamesWon: player.score > 0 ? 1 : 0, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º
                winRate: player.score > 0 ? 100 : 0
            }));
        } catch (error) {
            console.warn('Legacy getAllPlayers also failed:', error);
            return [];
        }
    }

    // –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è getAllPlayers –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    public async getAllPlayers(): Promise<Array<{ address: string, name: string, score: number }>> {
        if (!this.contractAddress) {
            console.warn('Contract address not set');
            return [];
        }

        if (!window.avalanche) {
            console.warn('Core.app not available');
            return [];
        }

        try {
            console.log(`üîç Checking players in contract: ${this.contractAddress}`);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            const countData = this.encodeCall('getPlayersCount', [], []);
            const countResult = await window.avalanche.request({
                method: 'eth_call',
                params: [{
                    to: this.contractAddress,
                    data: countData
                }, 'latest']
            });

            const playerCount = parseInt(countResult, 16);
            console.log(`üìä Player count from contract ${this.contractAddress}: ${playerCount} (raw: ${countResult})`);

            // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if (playerCount === 0 || isNaN(playerCount)) {
                console.log('‚ö†Ô∏è No players found in contract or invalid count');
                return [];
            }

            const players = [];

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–º–∞–∫—Å–∏–º—É–º 10 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            const maxPlayers = Math.min(playerCount, 10);
            for (let i = 0; i < maxPlayers; i++) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–≥—Ä–æ–∫–∞
                    const playerData = this.encodeCall('getPlayer', ['uint256'], [i.toString()]);
                    const playerResult = await window.avalanche.request({
                        method: 'eth_call',
                        params: [{
                            to: this.contractAddress,
                            data: playerData
                        }, 'latest']
                    });

                    console.log(`getPlayer(${i}) raw result:`, playerResult);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x + 64 hex —Å–∏–º–≤–æ–ª–∞ (32 –±–∞–π—Ç–∞)
                    // –ê–¥—Ä–µ—Å –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç (40 hex —Å–∏–º–≤–æ–ª–æ–≤)
                    let playerAddress = '';
                    if (playerResult && playerResult.length >= 42) {
                        // –£–±–∏—Ä–∞–µ–º 0x –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 40 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º 0x –æ–±—Ä–∞—Ç–Ω–æ
                        const hexWithoutPrefix = playerResult.slice(2);
                        const addressHex = hexWithoutPrefix.slice(-40);
                        playerAddress = '0x' + addressHex;
                    } else {
                        console.error('Invalid player result format:', playerResult);
                        continue;
                    }

                    console.log(`Player ${i}: ${playerAddress}`);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π
                    if (playerAddress === '0x0000000000000000000000000000000000000000') {
                        continue;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
                    const [playerName, score] = await Promise.allSettled([
                        this.getPlayerName(playerAddress),
                        this.getPlayerScore(playerAddress)
                    ]).then(results => [
                        results[0].status === 'fulfilled' ? results[0].value : `Player (${playerAddress.substring(0, 6)}...)`,
                        results[1].status === 'fulfilled' ? results[1].value : 0
                    ]);

                    players.push({
                        address: playerAddress,
                        name: String(playerName || `Player (${playerAddress.substring(0, 6)}...)`),
                        score: Number(score)
                    });
                } catch (playerError) {
                    console.warn(`Error getting player ${i}:`, playerError);
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                }
            }

            return players;
        } catch (error) {
            console.warn('Error getting all players, returning empty array:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
            return [];
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    public async isContractOwner(): Promise<boolean> {
        console.log('üîç Checking contract ownership...');

        if (!this.contractAddress || !this.connectedAddress) {
            console.log('‚ùå Missing contract address or connected address');
            console.log(`Contract: ${this.contractAddress}, Wallet: ${this.connectedAddress}`);
            return false;
        }

        if (!window.avalanche) {
            console.log('‚ùå Core.app not available');
            return false;
        }

        try {
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é owner() –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            console.log('üìû Calling contract owner() function...');
            const data = this.encodeCall('owner', [], []);
            console.log('üì¶ Encoded call data:', data);

            const result = await window.avalanche.request({
                method: 'eth_call',
                params: [{
                    to: this.contractAddress,
                    data: data
                }, 'latest']
            });

            console.log('üìÑ Raw owner() result:', result);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const ownerAddress = '0x' + result.slice(-40);
            console.log(`üëë Contract owner: ${ownerAddress}`);
            console.log(`üîó Connected wallet: ${this.connectedAddress}`);

            const isOwner = ownerAddress.toLowerCase() === this.connectedAddress.toLowerCase();
            console.log(`‚úÖ Ownership check result: ${isOwner}`);

            return isOwner;
        } catch (error) {
            console.error('‚ùå Error checking contract owner:', error);
            return false;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫—É (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    public async addPlayerScore(playerName: string, walletAddress: string, scoreToAdd: number, wonGame: boolean): Promise<void> {
        if (!this.contractAddress || !this.connectedAddress) {
            throw new Error('Contract address or wallet connection not set');
        }

        if (!window.avalanche) {
            throw new Error('Core.app not available');
        }

        try {
            console.log(`üéÆ Adding score for player: "${playerName}", wallet: ${walletAddress}, score: ${scoreToAdd}, won: ${wonGame}`);

            // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ - –ª—é–±–æ–π –∫–æ—à–µ–ª–µ–∫ –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log(`‚úÖ Proceeding with transaction (no owner verification required)`);

            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ addPlayerScore
            const data = this.encodeCall('addPlayerScore',
                ['string', 'address', 'uint256', 'bool'],
                [playerName, walletAddress, scoreToAdd.toString(), wonGame.toString()]);

            console.log('Transaction data:', data);

            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º gas –ª–∏–º–∏—Ç–æ–º –∏ —Ü–µ–Ω–æ–π –≥–∞–∑–∞
            const txParams = {
                from: this.connectedAddress,
                to: this.contractAddress,
                data,
                gas: '0x7A120', // 500000 –≤ hex - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                gasPrice: '0x2540BE400' // 10 Gwei –≤ hex - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –¥–ª—è Avalanche
            };

            console.log('Transaction params:', txParams);
            console.log(`üìç Using contract address for WRITE: ${this.contractAddress}`);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txHash = await window.avalanche.request({
                method: 'eth_sendTransaction',
                params: [txParams]
            });

            console.log('Transaction hash:', txHash);

            if (!txHash) {
                throw new Error('No transaction hash received');
            }

            // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await this.waitForTransaction(txHash);

            console.log('Transaction confirmed');

            // –î–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫—á–µ–π–Ω—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 1000));

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
            this.notifyScoreUpdate(walletAddress, scoreToAdd);
        } catch (error) {
            console.error('Failed to add player score:', error);
            throw error;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    public async setPlayerScore(playerAddress: string, playerName: string, score: number): Promise<void> {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é addPlayerScore, —Å—á–∏—Ç–∞—è —á—Ç–æ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –æ—á–∫–∏
        await this.addPlayerScore(playerName, playerAddress, score, score > 0);
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
    public onScoreUpdate(callback: (player: string, score: number) => void): void {
        this.scoreUpdateCallbacks.push(callback);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
    private notifyScoreUpdate(player: string, score: number): void {
        this.scoreUpdateCallbacks.forEach(callback => {
            try {
                callback(player, score);
            } catch (error) {
                console.error('Error in score update callback:', error);
            }
        });
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
    public subscribeToScoreUpdates(callback: (player: string, score: number) => void): void {
        if (!this.contractAddress) {
            throw new Error('Contract address not set');
        }

        // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        const eventListener = async () => {
            try {
                // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                // callback –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å UI, –∑–∞–≥—Ä—É–∂–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
                console.log('Checking for score updates...');

                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            } catch (error) {
                console.error('Error checking for events:', error);
            }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        const intervalId = setInterval(eventListener, 10000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        this.eventListeners.push(() => {
            clearInterval(intervalId);
        });
    }

    // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    public unsubscribeFromEvents(): void {
        this.eventListeners.forEach(unsubscribe => unsubscribe());
        this.eventListeners = [];
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
    private decodeMultipleArraysResult(result: string, arrayCount: number): any[][] {
        try {
            if (!result || result === '0x' || result.length < 130) {
                return [];
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞ (0x)
            const data = result.slice(2);

            // –ß–∏—Ç–∞–µ–º offsets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            const offsets = [];
            for (let i = 0; i < arrayCount; i++) {
                const offsetHex = data.slice(i * 64, (i + 1) * 64);
                offsets.push(parseInt(offsetHex, 16) * 2); // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è hex
            }

            const arrays = [];

            for (let i = 0; i < arrayCount; i++) {
                const offset = offsets[i];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                if (offset >= data.length) {
                    console.warn(`Offset ${offset} is out of bounds for data length ${data.length}`);
                    arrays.push([]);
                    continue;
                }

                const lengthHex = data.slice(offset, offset + 64);
                const length = parseInt(lengthHex, 16);

                if (length === 0) {
                    arrays.push([]);
                    continue;
                }

                const arrayData = [];

                if (i === 0) {
                    // –ü–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤ - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤)
                    console.log(`üî§ Decoding ${length} strings from array ${i}`);

                    // –ß–∏—Ç–∞–µ–º offsets –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                    const stringOffsets = [];
                    for (let j = 0; j < length; j++) {
                        const stringOffsetHex = data.slice(offset + 64 + (j * 64), offset + 64 + ((j + 1) * 64));
                        const relativeOffset = parseInt(stringOffsetHex, 16) * 2;
                        stringOffsets.push(relativeOffset);
                        console.log(`String ${j} relative offset: ${relativeOffset}`);
                    }

                    for (let j = 0; j < length; j++) {
                        const stringAbsoluteOffset = offset + stringOffsets[j];
                        console.log(`üîç Processing string ${j} at absolute offset ${stringAbsoluteOffset}`);

                        if (stringAbsoluteOffset >= data.length) {
                            console.warn(`String offset ${stringAbsoluteOffset} out of bounds`);
                            arrayData.push(`Player ${j + 1}`);
                            continue;
                        }

                        const stringLengthHex = data.slice(stringAbsoluteOffset, stringAbsoluteOffset + 64);
                        const stringLength = parseInt(stringLengthHex, 16);
                        console.log(`String ${j} length: ${stringLength}`);

                        if (stringLength === 0 || stringLength > 100) { // Reduced max length to 100
                            console.warn(`Invalid string length: ${stringLength} for string ${j}`);
                            arrayData.push(`Player ${j + 1}`);
                            continue;
                        }

                        // –ü–æ–ª—É—á–∞–µ–º hex –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        const stringDataStartOffset = stringAbsoluteOffset + 64;
                        const stringDataHex = data.slice(stringDataStartOffset, stringDataStartOffset + (stringLength * 2));
                        console.log(`String ${j} hex data (${stringLength} chars): ${stringDataHex}`);

                        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º hex –≤ UTF-8 —Å—Ç—Ä–æ–∫—É
                        let stringValue = '';
                        try {
                            for (let k = 0; k < stringLength * 2; k += 2) {
                                const hexByte = stringDataHex.substr(k, 2);
                                if (hexByte && hexByte !== '00') {
                                    const charCode = parseInt(hexByte, 16);
                                    if (charCode >= 32 && charCode <= 126) { // Printable ASCII
                                        stringValue += String.fromCharCode(charCode);
                                    }
                                }
                            }
                        } catch (stringError) {
                            console.warn(`Error decoding string ${j}:`, stringError);
                            stringValue = `Player ${j + 1}`;
                        }

                        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –º—É—Å–æ—Ä–∞
                        stringValue = stringValue.replace(/[^\x20-\x7E]/g, '').trim();
                        console.log(`‚úÖ Decoded string ${j}: "${stringValue}"`);
                        arrayData.push(stringValue || `Player ${j + 1}`);
                    }
                } else {
                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã - –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    for (let j = 0; j < length; j++) {
                        const itemOffset = offset + 64 + (j * 64);
                        if (itemOffset + 64 > data.length) {
                            arrayData.push(i === 1 ? '0x0000000000000000000000000000000000000000' : 0);
                            continue;
                        }

                        const itemHex = data.slice(itemOffset, itemOffset + 64);

                        if (i === 1) {
                            // –í—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ - –∞–¥—Ä–µ—Å–∞
                            const addressHex = itemHex.slice(-40);
                            arrayData.push('0x' + addressHex);
                        } else {
                            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã - —á–∏—Å–ª–∞
                            arrayData.push(parseInt(itemHex, 16) || 0);
                        }
                    }
                }

                arrays.push(arrayData);
            }

            return arrays;
        } catch (error) {
            console.warn('Error decoding multiple arrays result:', error);
            return [];
        }
    }
    private encodeCall(functionName: string, types: string[], values: string[]): string {
        // –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –µ—ë Keccak-256 —Ö–µ—à
        const signature = `${functionName}(${types.join(',')})`;
        const hash = keccak256(signature);
        const methodId = '0x' + hash.slice(0, 8); // –ü–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ (8 hex —Å–∏–º–≤–æ–ª–æ–≤)

        console.log(`Function: ${signature} -> Method ID: ${methodId}`);

        // –ö–æ–¥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        let encodedParams = '';
        let stringData = '';
        let currentOffset = types.length * 32; // –ö–∞–∂–¥—ã–π –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –∑–∞–Ω–∏–º–∞–µ—Ç 32 –±–∞–π—Ç–∞

        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            const type = types[i];

            if (type === 'address') {
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
                const paddedValue = value.startsWith('0x') ? value.slice(2) : value;
                encodedParams += paddedValue.toLowerCase().padStart(64, '0');
            } else if (type === 'uint256') {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ hex –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
                const hexValue = parseInt(value).toString(16);
                encodedParams += hexValue.padStart(64, '0');
            } else if (type === 'bool') {
                // –ë—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: true = 1, false = 0
                const boolValue = (value === 'true' || value === '1') ? '1' : '0';
                encodedParams += boolValue.padStart(64, '0');
            } else if (type === 'string') {
                // –î–ª—è —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º offset (—É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–æ–∫–∏)
                const offsetHex = currentOffset.toString(16).padStart(64, '0');
                encodedParams += offsetHex;

                // –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                const stringBytes = new TextEncoder().encode(value);
                const lengthHex = stringBytes.length.toString(16).padStart(64, '0');
                const hexString = Array.from(stringBytes)
                    .map(b => b.toString(16).padStart(2, '0'))
                    .join('');

                // –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 32 –±–∞–π—Ç–∞–º
                const paddedStringHex = hexString.padEnd(Math.ceil(hexString.length / 64) * 64, '0');

                stringData += lengthHex + paddedStringHex;
                currentOffset += 32 + Math.ceil(stringBytes.length / 32) * 32; // length + padded data
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü
        const result = methodId + encodedParams + stringData;
        console.log(`Encoded call: ${result}`);
        return result;
    }
}


