#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONTRACT_FILE = 'contracts/PongTournamentScores.sol';
const OUTPUT_FILE = 'src/blockchain/contractConfig.ts';
const BUILD_DIR = 'build';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ solc
function ensureSolcInstalled() {
    try {
        execSync('solc --version', { stdio: 'pipe' });
        console.log('‚úì Solidity compiler –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
        console.log('‚ö† Solidity compiler –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...');
        try {
            execSync('npm install -g solc', { stdio: 'inherit' });
            console.log('‚úì Solidity compiler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } catch (installError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ solc:', installError.message);
            process.exit(1);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
function compileContract() {
    console.log('üî® –ö–æ–º–ø–∏–ª–∏—Ä—É—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç...');

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(BUILD_DIR)) {
        fs.mkdirSync(BUILD_DIR, { recursive: true });
    }

    try {
        // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        const compileCommand = `solc --optimize --abi --bin --output-dir ${BUILD_DIR} ${CONTRACT_FILE}`;
        execSync(compileCommand, { stdio: 'pipe' });
        console.log('‚úì –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω');

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function readCompiledFiles() {
    const contractName = 'PongTournamentScores';
    const abiFile = path.join(BUILD_DIR, `${contractName}.abi`);
    const binFile = path.join(BUILD_DIR, `${contractName}.bin`);

    if (!fs.existsSync(abiFile) || !fs.existsSync(binFile)) {
        console.error('‚ùå –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
    }

    try {
        const abi = JSON.parse(fs.readFileSync(abiFile, 'utf8'));
        const bytecode = '0x' + fs.readFileSync(binFile, 'utf8').trim();

        return { abi, bytecode };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TypeScript —Ñ–∞–π–ª–∞
function generateTypeScriptConfig(abi, bytecode) {
    const content = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ${CONTRACT_FILE}
// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run compile-contract

export const PongTournamentScoresABI = ${JSON.stringify(abi, null, 4)};

export const PongTournamentScoresBytecode = "${bytecode}";
`;

    try {
        fs.writeFileSync(OUTPUT_FILE, content, 'utf8');
        console.log(`‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${OUTPUT_FILE}`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI –∏ –±–∞–π—Ç–∫–æ–¥–∞ –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    console.log('='.repeat(50));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if (!fs.existsSync(CONTRACT_FILE)) {
        console.error(`‚ùå –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CONTRACT_FILE}`);
        process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º solc
    ensureSolcInstalled();

    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    if (!compileContract()) {
        process.exit(1);
    }

    // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    const compiled = readCompiledFiles();
    if (!compiled) {
        process.exit(1);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!generateTypeScriptConfig(compiled.abi, compiled.bytecode)) {
        process.exit(1);
    }

    console.log('='.repeat(50));
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ ABI –∏ –±–∞–π—Ç–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ ${OUTPUT_FILE}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = { main };
