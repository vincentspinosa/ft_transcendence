#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Solidity –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import json
import os
import subprocess
import sys
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONTRACT_FILE = "contracts/PongTournamentScores.sol"
OUTPUT_FILE = "src/blockchain/contractConfig.ts"
BUILD_DIR = "build"

def ensure_solc_installed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç solc –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    try:
        subprocess.run(["solc", "--version"], capture_output=True, check=True)
        print("‚úì Solidity compiler –Ω–∞–π–¥–µ–Ω")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö† Solidity compiler –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return install_solc()

def install_solc():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç solc —á–µ—Ä–µ–∑ pip"""
    try:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é py-solc-x...")
        subprocess.run([sys.executable, "-m", "pip", "install", "py-solc-x"], check=True)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º solc
        from solcx import install_solc, set_solc_version
        
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Solidity 0.8.19...")
        install_solc('0.8.19')
        set_solc_version('0.8.19')
        
        print("‚úì Solidity compiler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ solc: {e}")
        return False

def compile_contract():
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ABI –∏ –±–∞–π—Ç–∫–æ–¥"""
    print("üî® –ö–æ–º–ø–∏–ª–∏—Ä—É—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç...")
    
    try:
        from solcx import compile_files
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª
        compiled = compile_files([CONTRACT_FILE])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: contracts/PongTournamentScores.sol:PongTournamentScores)
        contract_key = None
        for key in compiled.keys():
            if "PongTournamentScores" in key:
                contract_key = key
                break
        
        if not contract_key:
            raise Exception("–ö–æ–Ω—Ç—Ä–∞–∫—Ç PongTournamentScores –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        
        contract = compiled[contract_key]
        abi = contract['abi']
        bytecode = '0x' + contract['bin']
        
        print("‚úì –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
        return abi, bytecode
        
    except ImportError:
        print("‚ùå py-solc-x –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—ã—Ç–∞—é—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π solc...")
        return compile_with_system_solc()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        return None, None

def compile_with_system_solc():
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º–Ω—ã–π solc"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build
        os.makedirs(BUILD_DIR, exist_ok=True)
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        cmd = [
            "solc",
            "--optimize",
            "--abi",
            "--bin",
            "--output-dir", BUILD_DIR,
            CONTRACT_FILE
        ]
        
        subprocess.run(cmd, check=True, capture_output=True)
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        abi_file = os.path.join(BUILD_DIR, "PongTournamentScores.abi")
        bin_file = os.path.join(BUILD_DIR, "PongTournamentScores.bin")
        
        if not os.path.exists(abi_file) or not os.path.exists(bin_file):
            raise Exception("–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with open(abi_file, 'r') as f:
            abi = json.load(f)
        
        with open(bin_file, 'r') as f:
            bytecode = '0x' + f.read().strip()
        
        return abi, bytecode
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º solc: {e}")
        return None, None

def generate_typescript_config(abi, bytecode):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    content = f"""// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {CONTRACT_FILE}
// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run compile-contract

export const PongTournamentScoresABI = {json.dumps(abi, indent=4)};

export const PongTournamentScoresBytecode = "{bytecode}";
"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
        
        with open(OUTPUT_FILE, 'w') as f:
            f.write(content)
        
        print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {OUTPUT_FILE}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ABI –∏ –±–∞–π—Ç–∫–æ–¥–∞ –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if not os.path.exists(CONTRACT_FILE):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONTRACT_FILE}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º solc
    if not ensure_solc_installed():
        sys.exit(1)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    abi, bytecode = compile_contract()
    if not abi or not bytecode:
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not generate_typescript_config(abi, bytecode):
        sys.exit(1)
    
    print("=" * 50)
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ ABI –∏ –±–∞–π—Ç–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
